package com.cymf.autogame.utils

import com.cymf.autogame.App
import com.cymf.autogame.bean.AdClicks
import com.cymf.autogame.bean.AdConfig
import com.cymf.autogame.bean.LogItem
import com.cymf.autogame.bean.LogLevel
import com.cymf.autogame.bean.Task
import com.cymf.autogame.bean.TaskBean
import com.cymf.autogame.constant.Constants
import com.cymf.autogame.service.AssistsService
import com.cymf.autogame.utils.net.NetworkClient
import com.hjq.toast.Toaster
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import java.util.concurrent.atomic.AtomicReference
import kotlin.coroutines.CoroutineContext
import kotlin.random.Random

/**
 * ÁΩëÁªúËΩÆËØ¢ËØ∑Ê±Ç
 */
object TaskPollingManager {

    private const val DEFAULT_DELAY = 3000L
    private val scope = object : CoroutineScope {
        override val coroutineContext: CoroutineContext
            get() = Dispatchers.Main + Job()
    }
    private var isPauseGetTask = false
    private val formatter by lazy {
        SimpleDateFormat("yyyy_MM_dd_HH_mm_ss", Locale.getDefault())
    }
    private val isTasking = AtomicBoolean(false)
    private val pollingJob = AtomicReference<Job?>(null)
    private val currentTask = AtomicReference<Task?>(null)
    private val currentAdConfigs = AtomicReference<List<AdConfig>>(null)

    private val mAdClicks = AtomicReference<List<AdClicks>>(emptyList())
    private val clicksCount by lazy { AtomicInteger(0) }

    private val tapBannerAdView by lazy { AtomicBoolean(false) }

//    fun togglePolling() {
//        if (pollingJob.get()?.isActive == true) {
//            stopPolling()
//        } else {
//            startPolling()
//        }
//    }

//    fun resumePolling() {
//        if (AssistsService.instance?.isAccessibilityServiceEnabled() != true) {
//            YLLogger.i("resumePolling AccessibilityServiceDisabled")
//            startPolling()  // AssistsService.instance?.isAccessibilityServiceEnabled()
//        } else if (!AssistsService.isServiceActive()) {
//            YLLogger.i("resumePolling AccessibilityServiceInActive")
//        } else if (currentTask.get() == null) {
//            YLLogger.i("resumePolling startPolling...")
//            startPolling()  //  currentTask.get() == null
//        } else {
//            if (pollingJob.get()?.isActive == true) return
//            YLLogger.w("resumePolling task is running")
//            reportTaskFatal("ÊÅ¢Â§çËé∑Âèñ‰ªªÂä°", "‰ªªÂä°‰∏≠Êñ≠")
//        }
//    }

    // ÂêØÂä®ËΩÆËØ¢ÔºàÂèØÊâãÂä®Ë∞ÉÁî®Ôºâ
    fun startPolling() {
        if (isPauseGetTask) {
            pollingJob.get()?.cancel()
            YLLogger.e("ÂÖ≥Èó≠ ÂçèÁ®ã=====" + pollingJob.get()?.isActive)
            return
        }
        if (isTasking.get()) {
            YLLogger.d("ÂΩìÂâçÊ≠£Âú®ÊâßË°åÂÖ∂‰ªñ‰ªªÂä°ÔºåË∑≥ËøáÊú¨Ê¨°ËΩÆËØ¢~")
            return
        }
        if (pollingJob.get()?.isActive == true) return
        YLLogger.d("start Polling ...")

        CoroutineWrapper.launch {
            ProcessKiller.killApp(App.context, Constants.PKG_AUTO_APP)
        }

        val newJob = scope.launch {
            var delayTime: Long
            // ÂàùÂßãÁ≠âÂæÖ 3 Áßí
            delay(DEFAULT_DELAY)

            while (isActive) {
                if (SPUtil.PHONE_ID.isBlank()) {
                    YLLogger.d("‚ö†Ô∏è startPolling...phone ID empty ÔºÅ")
                    App.addLog(LogItem(LogLevel.NORMAL, "‚ö†Ô∏è", "Êâæ‰∏çÂà∞ËÆæÂ§áID!"))
                    delay(DEFAULT_DELAY)
                    continue
                }
                App.resetRoundTimer()
                App.addLog(LogItem(LogLevel.NORMAL, "‚òï", "Ëé∑Âèñ‰ªªÂä°‰∏≠‚Ä¶‚Ä¶"))
                val (data, _) = NetworkClient.get(SPUtil.PHONE_ID)
                val modeID = data?.task?.modeID
                App.addLog(LogItem(LogLevel.NORMAL, "üçµ", "ÂΩìÂâç‰ªªÂä°ID=$modeID"))
                YLLogger.d("startPolling...modeID= $modeID")
                when {
                    modeID == 11 -> {   //  Á≠âÂæÖ‰∏ãÊ¨°ËΩÆËØ¢ÔºåÊó∂Èó¥Áî± waitTime Êèê‰æõ
                        val waitTime = data.task.waitTime ?: DEFAULT_DELAY
                        val text = when (waitTime) {
                            3000L -> "‰ªªÂä°Â§ÑÁêÜ‰∏≠"
                            23000L -> "Á≠âÂæÖÊñ∞‰ªªÂä°"
                            60000L -> "‰∫ëÊâãÊú∫ÂºÇÂ∏∏"
                            else -> "Êú™Áü•ÊÉÖÂÜµÔºåËØ∑Á≠âÂæÖÊàñËÅîÁ≥ªÂºÄÂèë‰∫∫Âëò"
                        }
                        isTasking.set(false)
                        App.addLog(LogItem(LogLevel.NORMAL, "‚åõÔ∏è", text))
                        delayTime = waitTime
                        delay(delayTime)
                    }

                    data == null || data.task == null -> {  //  Âá∫ÈîôÔºåÁ≠â3Áßí
                        App.addLog(
                            LogItem(
                                LogLevel.NORMAL,
                                "üñ§",
                                "Âá∫Áé∞ÈîôËØØÔºåËØ∑Á≠âÂæÖ${DEFAULT_DELAY / 1000}Áßí"
                            )
                        )
                        isTasking.set(false)
                        delay(DEFAULT_DELAY)
                    }

                    else -> {
                        App.addLog(LogItem(LogLevel.NORMAL, "üëâ", "ÂáÜÂ§áÊâßË°å‰ªªÂä°‚Ä¶‚Ä¶"))
                        data.task.let { task ->
                            currentTask.set(task.copy())
                        }
                        data.adConfig?.takeIf { data.task.modeID in listOf(2, 3) }?.let {
                            currentAdConfigs.set(it.toList())
                        }
                        stopPolling()
                        assigningTasks()
                    }
                }
            }
        }
        App.addLog(LogItem(LogLevel.NORMAL, "üòâ", "ÂºÄÂßãËé∑Âèñ‰ªªÂä°"))
        // ÂéüÂ≠êËÆæÁΩÆÔºöÂ¶ÇÊûúÂΩìÂâç‰∏∫ nullÔºåÊâçËÆæÁΩÆÊñ∞ÂÄº
        YLLogger.d("startPolling...pollingJob...")
        pollingJob.compareAndSet(null, newJob)
    }

    /**
     * ÂàÜÈÖç‰ªªÂä°
     */
    private suspend fun assigningTasks() {
        val task = currentTask.get()
        YLLogger.d("assigningTasks... ${task?.modeID}")
        AssistsService.instance?.setStartTaskValue(true)
        when (task?.modeID) {
            1, 5 -> {    //  ÂéªGoogle PlayÂÆâË£ÖSAPP | ÂéªGoogle PlayÂÆâË£ÖAAPP
                val text = if (1 == task.modeID) {
                    "ÂéªGoogle PlayÂÆâË£ÖSAPP"
                } else {
                    "ÂéªGoogle PlayÂÆâË£ÖAAPP"
                }
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üö¥",
                        "‰ªªÂä°{${task.modeID}} $text",
                        task.packageName
                    )
                )
                isTasking.set(true)
                val pkgName = task.packageName ?: return startPolling()
                YLLogger.setLogFileName("log_gg_${suffix()}")
                Toaster.showShort("Âç≥Â∞ÜË∑≥ËΩ¨Âà∞Google Play")
                AppUtil.startGooglePlay(pkgName)
                GlobalTimer.getInstance().start()
            }

            2, 3 -> {    //  SAPPÈ¶ñÊ¨°ÊøÄÊ¥ª‰ΩøÁî® | SAPPÂêéÁª≠ÁïôÂ≠ò‰ΩøÁî® (ÁõÆÂâçÂè™ÊúâLMËøô‰∏Ä‰∏™App)
                val text = if (2 == task.modeID) {
                    "SAPPÈ¶ñÊ¨°ÊøÄÊ¥ª‰ΩøÁî®"
                } else {
                    "SAPPÂêéÁª≠ÁïôÂ≠ò‰ΩøÁî®"
                }
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üö¥",
                        "‰ªªÂä°{${task.modeID}} $text",
                        task.packageName
                    )
                )
                isTasking.set(true)
                GlobalTimer.getInstance().start()
            }

            4, 8 -> {    //  ÂéªGoogle PlayÊõ¥Êñ∞SAPP | ÂéªGoogle PlayÊõ¥Êñ∞AAPP (ÊöÇÊó∂Êú™ÂÅöÊ≠§‰ªªÂä°ÔºÅ)
                val text = if (4 == task.modeID) {
                    "ÂéªGoogle PlayÊõ¥Êñ∞SAPP"
                } else {
                    "ÂéªGoogle PlayÊõ¥Êñ∞AAPP"
                }
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üö¥",
                        "‰ªªÂä°{${task.modeID}} $text",
                        task.packageName, task.packageName
                    )
                )
                isTasking.set(true)
                val pkgName = task.packageName ?: return startPolling()
                Toaster.showShort("Âç≥Â∞ÜË∑≥ËΩ¨Âà∞Google Play")
                AppUtil.startGooglePlay(pkgName)
                GlobalTimer.getInstance().start()
            }

            6, 7 -> {  //  AAPPÈ¶ñÊ¨°ÊøÄÊ¥ª‰ΩøÁî® | AAPPÂêéÁª≠ÁïôÂ≠ò‰ΩøÁî® ÔºàÂÑøÁ´•Êìç‰ΩúÔºâ
                if (6 == task.modeID) {
                    App.addLog(
                        LogItem(
                            LogLevel.LV_2,
                            "üö¥",
                            "‰ªªÂä°{${task.modeID}} AAPPÈ¶ñÊ¨°ÊøÄÊ¥ª‰ΩøÁî®",
                            task.packageName
                        )
                    )
                } else {
                    App.addLog(
                        LogItem(
                            LogLevel.LV_1,
                            "üö¥",
                            "‰ªªÂä°{${task.modeID}} AAPPÂêéÁª≠ÁïôÂ≠ò‰ΩøÁî®",
                            task.packageName
                        )
                    )
                }
                isTasking.set(true)
                GlobalTimer.getInstance().start()
            }

            10 -> {   //  ÈªòËÆ§ÊµèËßàÂô®È¶ñÊ¨°‰ΩøÁî®Â§ÑÁêÜÂºïÂØºÈ°µ
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üö¥",
                        "‰ªªÂä°{${task.modeID}} ÈªòËÆ§ÊµèËßàÂô®È¶ñÊ¨°‰ΩøÁî®Â§ÑÁêÜÂºïÂØºÈ°µ"
                    )
                )
                YLLogger.setLogFileName("log_browser_${suffix()}")
                isTasking.set(true)
                GlobalTimer.getInstance().start()
            }

            9 -> {    //  Êõ¥Êñ∞Êó†ÈöúÁ¢çÂ∫îÁî®
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üö¥",
                        "‰ªªÂä°{${task.modeID}} Êõ¥Êñ∞Êó†ÈöúÁ¢çÂ∫îÁî®(ÂèØÂøΩÁï•)", task.packageName
                    )
                )
                reportTaskComp(true)   //   Êõ¥Êñ∞‰ªªÂä°ÔºåÊöÇÊó†
                delay(700)
                isTasking.set(false)
                GlobalTimer.getInstance().reset()
                startPolling()  //  ÂºÄÂêØ‰∏ã‰∏ÄËΩÆ‰ªªÂä°ËØ∑Ê±Ç
            }

            else -> {
                App.addLog(
                    LogItem(
                        LogLevel.NORMAL,
                        "üåö",
                        "Êú™Â§ÑÁêÜ‰ªªÂä°,id=${task?.modeID}(ÂèØÂøΩÁï•)",
                        task?.packageName ?: "Null"
                    )
                )
                reportTaskComp(true)    //  ‰∏ÄËà¨modeID=11
                delay(700)
                isTasking.set(false)
                GlobalTimer.getInstance().reset()
                startPolling()  //  ÂºÄÂêØ‰∏ã‰∏ÄËΩÆ‰ªªÂä°ËØ∑Ê±Ç
            }
        }
    }

    /**
     * ‰∏äÊä•‰ªªÂä°ÂÆåÊàê
     * task.modeId == 2|3Êó∂ ‰∏ä‰º† adClicks
     */
    fun reportTaskComp(isSuccess: Boolean) {
        AssistsService.instance?.setStartTaskValue(false)
        val task = currentTask.get()
        if (task == null) {
            YLLogger.d("task == null")
            GlobalTimer.getInstance().reset()
            return
        }
        currentTask.set(null)
        val text = if (isSuccess) "ÂÆåÊàê" else "Â§±Ë¥•"
        App.addLog(LogItem(LogLevel.NORMAL, "üôá", "Âç≥Â∞Ü‰∏äÊä•‰ªªÂä° {$text} Áä∂ÊÄÅ"))
        val taskBody = JsonConvert.buildTaskBody(isSuccess, task, mAdClicks.get())
        YLLogger.d("reportTaskComp... ${task.modeID} $isSuccess, ${mAdClicks.get()}")
        NetworkClient.complete<TaskBean>(taskBody) { data, error ->
            if (data?.code == 200) {
                App.addLog(LogItem(LogLevel.NORMAL, "‚úÖ", "‰∏äÊä•‰ªªÂä°Êé•Âè£ÂõûË∞É $data"))
            } else {
                App.addLog(LogItem(LogLevel.LV_1, "üêû", "‰∏äÊä•‰ªªÂä°Â§±Ë¥•ÔºÅ \nüêû$error"))
            }
            YLLogger.e(data.toString(), error)
            currentAdConfigs.set(null)
            mAdClicks.set(emptyList())
            setClickCount(0)
            isTasking.set(false)
            GlobalTimer.getInstance().reset()
            startPolling()  //  ‰∏äÊä•‰ªªÂä°ÂÆåÊàêÂêéÂÜçËøõË°åÊñ∞‰ªªÂä°ËØ∑Ê±Ç
        }
    }

    /**
     * ‰∏äÊä•‰ªªÂä°‰∏•ÈáçÈîôËØØÔºÅ
     */
//    fun reportTaskFatal(title: String, details: String) {
//        val task = currentTask.get() ?: return
//        currentTask.set(null)
//        App.addLog(LogItem(LogLevel.NORMAL, "üôá", "Âç≥Â∞Ü‰∏äÊä•‰ªªÂä°ÈîôËØØ‰ø°ÊÅØ \n$title \n$details"))
//        val taskBody = JsonConvert.buildFatalBody(title, details, task)
//        NetworkClient.fatal<TaskBean>(taskBody) { data, error ->
//            if (data?.code == 200) {
//                App.addLog(LogItem(LogLevel.NORMAL, "‚úÖ", "‰ªªÂä°ÈîôËØØÊé•Âè£ÂõûË∞É $data"))
//            } else {
//                App.addLog(LogItem(LogLevel.LV_1, "üêû", "‰∏ä‰º†‰ªªÂä°ÈîôËØØÂ§±Ë¥•ÔºÅ \nüêû$error"))
//            }
//            YLLogger.e(data.toString(), error)
//            currentAdConfigs.set(null)
//            mAdClicks.set(emptyList())
//            setClickCount(0)
//            startPolling()  //  ‰∏äÊä•‰ªªÂä°ÈîôËØØÂêéÂÜçËøõË°åÊñ∞‰ªªÂä°ËØ∑Ê±Ç
//        }
//    }

    // ÂÅúÊ≠¢ËΩÆËØ¢
    fun stopPolling() {
        runCatching {
            val currentJob = pollingJob.getAndSet(null)
            currentJob?.cancel()
        }
    }

//    fun getClickCount(): Int {
//        return clicksCount.get()
//    }

    fun getCurrTaskSpeed(duration: Long = -1): Long {
        val baseDuration = if (duration == -1L) {
            Random.nextInt(50, 200).toLong()
        } else duration

        return (baseDuration * (currentTask.get()?.tapSpeedIncRate ?: 1.0)).toLong()
    }

    fun getCurrTask(): Task? {
        return currentTask.get()
    }

//    fun getAdNetwork(type: String): String? {
//        return getAdLoadInfo()[type]
//    }

//    fun getAdConfigByType(ad: Pair<String, String>?): AdConfig? {
//        return getAdConfigs().firstOrNull { it.adType == ad?.first && it.adNetwork == ad.second }
//    }

//    fun getAdConfigs(): List<AdConfig> {
//        return currentAdConfigs.get() ?: emptyList()
//    }

    fun getTapBannerAdView(): Boolean {
        return tapBannerAdView.get()
    }

    fun setTapBannerAdView(tapView: Boolean) {
        tapBannerAdView.set(tapView)
    }

//    fun addAdClicks(adClicks: AdClicks) {
//        mAdClicks.updateAndGet { it + adClicks }
//    }

    fun setClickCount(count: Int = -1) {
        if (count == -1) {
            clicksCount.incrementAndGet()
        } else {
            clicksCount.set(count)
        }
    }

    private fun suffix(): String {
        return synchronized(formatter) {
            formatter.format(Date())
        }
    }

//    fun getAdLoadInfo(): Map<String, String> {
//        return Shell.cmd("cat ${Constants.AD_LOAD_PATH}").exec()
//            .takeIf { it.isSuccess }
//            ?.out?.map { line ->
//                val (type, network) = line.split("\t")
//                return@map type to network
//            }?.toMap()?.apply {
//                App.addLog(LogItem(LogLevel.NORMAL, "ü§™", "Ëé∑ÂèñÂπøÂëäÂä†ËΩΩ‰ø°ÊÅØ ‚Üì‚Üì‚Üì "))
//                App.addLog(LogItem(LogLevel.NORMAL, "ü§™", "$this"))
//                YLLogger.d("ü§™adLoadInfo: $this")
//            } ?: emptyMap()
//    }

//    fun setIsPauseGetTask(isPauseGetTask: Boolean) {
//        TaskPollingManager.isPauseGetTask = isPauseGetTask
//    }

//    fun isPauseGetTask(): Boolean {
//        return isPauseGetTask
//    }
}